import java.util.Scanner;
import java.util.ArrayList;

public class Driver {

	private Scanner input;
	private Board board;
	private Player player;
	private Cards cards;
	private CardSetup cardSetup;
	int i;
	ArrayList<String> playerNames = new ArrayList<String>();

	public Driver()
	{
		input = new Scanner(System.in);
		board = new Board();
		player = new Player();
		cards = new Cards();
		cardSetup = new CardSetup(null, null, 0);
		i=0;
		numberOfPlayers();
	}

	public static void main(String[] argvs){
		Driver driver = new Driver();
	}




	private void numberOfPlayers()
	{
		System.out.println("Enter the number of players: ");
		int i = input.nextInt();
		if (i>=3 && i < 7)
		{
			this.i=i;
			run();
		}
		else
		{
			System.out.println("Invalid Number of Players, has to be between 3 and 6");
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine(); 
			//clear the terminal window and display the main menu again
			System.out.println("\f");
			numberOfPlayers();
		}


	}

	private void run()
	{
		int option = mainMenu();
		while (option != 0)
		{

			switch (option)
			{
			case 1:    addPlayer();
			break; 
			// case 2 is load game feature, add later?
			case 3:    System.out.println(board.toString());
			break;
			case 4:    
				if (playerNames.size() > 0){
					firstMenu();
				}
				else System.out.println("Add players first");
			break;
			}
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

			//clear the terminal window and display the main menu again
			System.out.println("\f");
			option = mainMenu();
		}   
		System.out.println("Exiting... bye");
		System.exit(0);
	}

	private void firstMenu()
	{
		int option = mainMenuTwo();
		while (option != 0)
		{

			switch (option)
			{
			case 1:    drawingCards(); 
			break;
		//	case 2:    load
			case 3:    System.out.println(board.toString());
			break;
			}
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

			//clear the terminal window and display the main menu again
			System.out.println("\f");
			option = mainMenuTwo();
		}   
		System.out.println("Exiting... bye");
		System.exit(0);
	}
	
	private int mainMenu()     
	{ 
		System.out.println("Welcome to Stocks and Shares");
		System.out.println("---------");     
		System.out.println("  1) Add Player Names");    
		System.out.println("  2) Load Game");
		System.out.println("  3)  Get Current Stock Prices");
		System.out.println("  4) Start Game");
		System.out.println("  0) Quit Game");
		int option = input.nextInt();
		return option;	
	}
	
	private int mainMenuTwo()
	{
		System.out.println("Stocks and Shares");
		System.out.println("---------");     
		System.out.println("  1) Draw Card");
		
		System.out.println("   3)  Save Game");
		
		int option = input.nextInt();
		return option;	
	}


	private void addPlayer()  
	{
		for(int b=0; b<i; b++)
		{
			System.out.println("Player Number " + (b+1) + " enter your name: ");
			String c = input.nextLine();
			c = input.nextLine();
			playerNames.add(c);

		}
	}


	
	public String drawingCards(){
		int i=1;
        int check =0;
		if (playerNames.size() > 0)
		{
			for (check = 0; check<=playerNames.size(); check ++)
			for (String player: playerNames){
				{
				System.out.println("Player" + i + " are you ready to draw your card? press Y when ready");
				String newStatus = input.nextLine();
				newStatus=input.nextLine(); // bug?
				newStatus.toLowerCase();
				if (newStatus.equals("y"))
				{
					System.out.println(cards.drawCard());
					int index = cards.getIndex();
					if (cards.currentCardType(index).equals("Store")){
						if (cards.currentUpOrDown(index).equals("Up: £")){
							board.setStoreUp(cards.currentCardValue(index));
						}
					
					    else {
							board.setStoreDown(cards.currentCardValue(index));
						}
					}

						if (cards.currentCardType(index).equals("Steel")){
							if (cards.currentUpOrDown(index).equals("Up: £")){
								board.setSteelUp(cards.currentCardValue(index));
							}
							else {
								board.setSteelDown(cards.currentCardValue(index));
							}
						}

							if (cards.currentCardType(index).equals("Shipping")){
								if (cards.currentUpOrDown(index).equals("Up: £")){
									board.setShippingUp(cards.currentCardValue(index));
								}
								else {
									board.setShippingDown(cards.currentCardValue(index));
								}
							}
							
								if (cards.currentCardType(index).equals("Motor")){
									if (cards.currentUpOrDown(index).equals("Up: £")){
										board.setMotorUp(cards.currentCardValue(index));
									}
									else {
										board.setMotorDown(cards.currentCardValue(index));
									}	
									
								}
								if (cards.currentCardType(index).equals("Bear")){
									board.setMotorDown(cards.currentCardValue(index));
									board.setShippingDown(cards.currentCardValue(index));
									board.setStoreDown(cards.currentCardValue(index));
									board.setSteelDown(cards.currentCardValue(index));
								}
								
								if (cards.currentCardType(index).equals("Bull")){
									board.setMotorUp(cards.currentCardValue(index));
									board.setShippingUp(cards.currentCardValue(index));
									board.setStoreUp(cards.currentCardValue(index));
									board.setSteelUp(cards.currentCardValue(index));
								}
								   cards.removeArray(cards.getIndex());
									i++;	
							
				}
				}
				cards.makeCards();
			}
		}

		return "Need more players";
	}
}


