/**
 * Creates a UI display for Stocks and Shares
 */

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collections;
import java.util.Scanner;
import java.util.ArrayList;

public class Driver {

	private Scanner input;
	private Board board;
	private Cards cards;
	int i;
	private int index;
	private int playerNumber;
	ArrayList<Player> playerNames = new ArrayList<Player>();
	private int endingRound = 0;
	private boolean playersAdded = false;

	/**
	 * 
	 * @throws ClassNotFoundException for the save load feature
	 * @throws IOException for the save load feature
	 * Constructor
	 */
	public Driver()
	{
		input = new Scanner(System.in);
		board = new Board(10,10,10,10,1);
		cards = new Cards();
		i=0;
		playerNumber = 0;
		numberOfPlayers();
	}

	public static void main(String[] argvs){
		Driver driver = new Driver();
	}



	/**
	 *  
	 * @throws ClassNotFoundException for the save load feature
	 * @throws IOException for the save load feature
	 * This method asks for how many players you want in the game
	 */
	private void numberOfPlayers()
	{
		System.out.println("Enter the number of players: ");
		try{
			int i = input.nextInt();
			if (i>=3 && i < 14)
			{
				this.i=i;
				run();
			}
			else
			{
				System.out.println("Invalid Number of Players, has to be between 3 and 6");
				System.out.println("\nPress any key to continue...");
				input.nextLine();
				input.nextLine();
				//clear the terminal window and display the main menu again
				System.out.println("\f");
				numberOfPlayers();
			}}
		catch (Exception e)
		{ 
			String throwOut = input.nextLine();  //swallows
			System.out.println("Num expected - you entered  text");
			numberOfPlayers();
		}



	}
	/**
	 * 
	 * @throws ClassNotFoundException
	 * @throws IOException
	 * runs with the main menu, when an option is selected it corresponds with this
	 */
	private void run() throws ClassNotFoundException, IOException
	{

		if (board.getRound() < 12){
	if (board.getRound() > 1){
				Collections.rotate(playerNames, -1); // Reference: http://stackoverflow.com/questions/21254985/how-move-first-item-of-arraylist-to-last-position
			}
			int option = mainMenu();
			while (option != 0)
			{
				switch (option)
				{
				case 1:  try{
					if (playersAdded == false){
						addPlayer();
					}
					else {
						System.out.println("Players have already been added");
					}
				}
				catch (Exception e){

					String throwOut = input.nextLine();  //swallows
					System.out.println("Invalid data");
					run();
				}
				break;
				case 2:  load();
				break;
				case 3:    System.out.println(board.toString());
				break;
				case 4:    
					if (playerNames.size() > 0){
						firstMenu();
					}
					else System.out.println("Add players first");
					break;
				case 5:    System.out.println(board.rules());
				break;

				}
				System.out.println("\nPress any key to continue...");
				input.nextLine();
				input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

				//clear the terminal window and display the main menu again
				System.out.println("\f");
				option = mainMenu();
			}  
			System.out.println("Exiting... bye");
			System.exit(0);
		}
		else{
			int i =0;
			for (Player player: playerNames){
				playerNames.get(i).setBalance(playerNames.get(i).getPlayerBalance() + 
						board.getMotor() * playerNames.get(i).getMotorShares());
				playerNames.get(i).setMotorShares(0);
				playerNames.get(i).setBalance(playerNames.get(i).getPlayerBalance() + 
						board.getSteel() * playerNames.get(i).getSteelShares());
				playerNames.get(i).setSteelShares(0);
				playerNames.get(i).setBalance(playerNames.get(i).getPlayerBalance() + 
						board.getStore() * playerNames.get(i).getStoreShares());
				playerNames.get(i).setStoreShares(0);
				playerNames.get(i).setBalance(playerNames.get(i).getPlayerBalance() + 
						board.getShipping() * playerNames.get(i).getShippingShares());
				playerNames.get(i).setShippingShares(0);
				i++;
			}
			if (playerNames.size() > 0)
			{
				int a=0;
				int b=0;
				int c= 0;
				int d =0;
				Player richest = playerNames.get(0);
				for (Player player : playerNames)
				{

					if (playerNames.get(a).getPlayerBalance() > richest.getPlayerBalance())  {
						richest = playerNames.get(a);
					}

				}

				for (Player player : playerNames){

					if (playerNames.get(b).getPlayerBalance() == richest.getPlayerBalance()){
						c++;
					}
					b++;
				}
				if (c > 0){
					System.out.println("There has been a draw" + "\n");
					for (Player player: playerNames){
						System.out.println(playerNames.get(d).getPlayerName() + " Finished with " + playerNames.get(d).getPlayerBalance());
						d++;
					}
				}
				else{
					System.out.println("The winner is " + richest.getPlayerName());
				}
 
			}}
	}

	/**
	 * 
	 * @throws ClassNotFoundException
	 * @throws IOException
	 * runs with main menu two, when an option is selected it corresponds with this
	 */
	private void firstMenu() throws ClassNotFoundException, IOException
	{

		int option = mainMenuTwo();
		while (option != 0)
		{

			switch (option)
			{
			case 1:    if (endingRound == 0){
				drawingCards();
			}
			else {
				System.out.println("Cards have already been drawn!");
			}
			break;
			case 2:    saveLoad();
			break;
			case 3:    if (endingRound == 1)
			{ secondMenu();
			}
			else {
				System.out.println("Must draw cards first!");
			}
			break;
			}
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

			//clear the terminal window and display the main menu again
			System.out.println("\f");
			option = mainMenuTwo();
		}  
		System.out.println("Exiting... bye");
		System.exit(0);
	}
	

	/**
	 * 
	 * @throws ClassNotFoundException
	 * @throws IOException
	 * runs with main menu three, when an option is selected it corresponds with this
	 */
	private void secondMenu() throws ClassNotFoundException, IOException
	{
		int option = mainMenuThree();
		while (option != 0)
		{
			if (playerNumber +1 <= playerNames.size()){
				switch (option)
				{
				case 1:    buyShares();
				break;
				case 2:    sellShares();
				break;
				case 3:    System.out.println(playerNames.get(playerNumber).getAllShares());
				break;
				case 4:    saveLoad();
				break;
				case 5:   System.out.println(playerNames.get(playerNumber).getPlayerBalance());
				break;
				case 6:     if (playerNumber + 1  == playerNames.size()){
					        board.setRound();
					        endingRound=0;
					        playerNumber =0;
					        run();
				}            
				else{
					playerNumber++;
					secondMenu();
					
						
				

				}                                      
				break;
				}

			}
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

			//clear the terminal window and display the main menu again
			System.out.println("\f");
			option = mainMenuThree();
		}  
		System.out.println("Exiting... bye");
		System.exit(0);
	}

	/**
	 * mainMenu() - This method displays the first menu for the application, 
	 * reads the menu option that the user entered and returns it.
	 * 
	 * @return     the users menu choice
	 */
	private int mainMenu()    
	{
		System.out.println("Welcome to Stocks and Shares");
		System.out.println("---------");
		System.out.println("Round Number:" + board.getRound());
		System.out.println("  1) Add Player Names");    
		System.out.println("  2) Load Game");
		System.out.println("  3)  Get Current Stock Prices");
		System.out.println("  4) Start Game");
		System.out.println("  5) Rules");
		System.out.println("  0) Quit Game");
		int option = input.nextInt();
		return option; 
	}

	/**
	 * mainMenuTwo() - This method displays the second menu for the application, 
	 * reads the menu option that the user entered and returns it.
	 * 
	 * @return     the users menu choice
	 */
	private int mainMenuTwo()
	{
		System.out.println("Stocks and Shares");
		System.out.println("---------");    
		System.out.println("  1) Draw Cards");
		System.out.println("   2)  Save Game");
		System.out.println("   3)  Start Buying/Selling Phase");
		System.out.println("   0)  Quit Game");
		int option = input.nextInt();
		return option; 
	}

	/**
	 * mainMenuThree() - This method displays the third menu for the application, 
	 * reads the menu option that the user entered and returns it.
	 * 
	 * @return     the users menu choice
	 */
	private int mainMenuThree()
	{
		System.out.println(playerNames.get(playerNumber).getPlayerName() + " It's your Go");
		System.out.println("---------");
		System.out.println("  1) Buy Stocks");
		System.out.println("  2) Sell Stocks");
		System.out.println("  3) Check Current Stocks");
		System.out.println("  4) Save Game");
		System.out.println("  5) Check Current Balance");
		System.out.println("  6) End Turn");
		int option = input.nextInt();
		return option;
	}
	

	/**
	 * Adds players to the game
	 */
	private void addPlayer()  
	{
		for(int b=0; b<i; b++)
		{
			System.out.println("Player Number " + (b+1) + " enter your name: ");
			try {
				String c = input.next();
				
			System.out.println("Player Number " + (b+1) + " enter your password");
			String d = input.next();
				Player player = new Player(c, d);
				
				playerNames.add(player);
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error invalid data");
				addPlayer();
			}
			playersAdded = true;
		}
	}


	/**
	 * Sets up drawing cards for the players     
	 * @return need more players if it isn't valid
	 */
	public String drawingCards(){
		int i=0;
		if (playerNames.size() > 0)
		{
			for (Player player: playerNames){
				{
					System.out.println(playerNames.get(i).getPlayerName() + " are you ready to draw your card? press Y when ready");
					try{
						String newStatus = input.next();
						if (newStatus.toLowerCase().equals("y"))
						{
							System.out.println("enter your password");
							String newPassword = input.next();
							if(newPassword.equals(playerNames.get(i).password())){
							System.out.println(cards.drawCard());
							int index = cards.getIndex();
							if (cards.currentCardType(index).equals("Store")){
								if (cards.currentUpOrDown(index).equals("Up: £")){
									board.setStoreUp(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}

								else {
									board.setStoreDown(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}
							}

							if (cards.currentCardType(index).equals("Steel")){
								if (cards.currentUpOrDown(index).equals("Up: £")){
									board.setSteelUp(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}
								else {
									board.setSteelDown(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}
							}

							if (cards.currentCardType(index).equals("Shipping")){
								if (cards.currentUpOrDown(index).equals("Up: £")){
									board.setShippingUp(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}
								else {
									board.setShippingDown(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}
							}

							if (cards.currentCardType(index).equals("Motor")){
								if (cards.currentUpOrDown(index).equals("Up: £")){
									board.setMotorUp(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}
								else {
									board.setMotorDown(cards.currentCardValue(index));
									cards.removeArray(cards.getIndex());
								}      

							}
							if (cards.currentCardType(index).equals("Bear")){
								board.setMotorDown(cards.currentCardValue(index));
								board.setShippingDown(cards.currentCardValue(index));
								board.setStoreDown(cards.currentCardValue(index));
								board.setSteelDown(cards.currentCardValue(index));
								cards.removeArray(cards.getIndex());
							}

							if (cards.currentCardType(index).equals("Bull")){
								board.setMotorUp(cards.currentCardValue(index));
								board.setShippingUp(cards.currentCardValue(index));
								board.setStoreUp(cards.currentCardValue(index));
								board.setSteelUp(cards.currentCardValue(index));
								cards.removeArray(cards.getIndex());
							}

							i++;   

						}
							else {
								System.out.println("not a valid password");
							}
					}
					}

					catch (Exception e){
						String throwOut = input.nextLine();  //swallows
						System.out.println("Error Invalid Data");
						drawingCards();



					}

				}
			}
			cards.clearCards();
			cards.makeCards();
			endingRound = 1;
		}

		return "Need more players";
	}

	/**
	 * Menu for buying shares along with the corresponding options that allow users to buy shares
	 */
	public void buyShares(){
		index=0;
		System.out.println("Which type of share would you like to buy?:  ");
		System.out.println("   1)  Motor");
		System.out.println("   2)  Shipping");
		System.out.println("   3)  Store");
		System.out.println("   4)  Steel");
		System.out.println("   0)  Exit");
		try{
			int i = input.nextInt();
			switch (i){
			case 1:      System.out.println("how many motor shares would you like to buy?");
			try{
				int a  = input.nextInt();
				if (a < 6 && a > 0  || a % 5 == 0)
				if (board.getMotor() != 0 && board.getMotorShares() != 0 && playerNames.get(playerNumber).getPlayerBalance() > 
				board.getMotor() * a){
					playerNames.get(playerNumber).setMotorShares(a);
					int newBalance = playerNames.get(playerNumber).getPlayerBalance() - (board.getMotor() * a);
					playerNames.get(playerNumber).setBalance(newBalance);
					board.setMotorShares(board.getMotorShares() - a);
					System.out.println("You bought " + a + " Motor Stocks" + "\n" + "Your new balance is: " + 
							playerNames.get(playerNumber).getPlayerBalance());
				}
				else {
					System.out.println("Value has to be between 1 and 5");
					buyShares();
				}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				buyShares();
			}
			break;
			case 2:      System.out.println("how many shipping shares would you like to buy?");
			try{
				int b  = input.nextInt();
				if (b > 0 && b < 6 || b % 5 == 0)
					if(board.getShipping() != 0 && board.getShippingShares() != 0 && playerNames.get(playerNumber).getPlayerBalance() > 
				board.getShipping() * b){
					playerNames.get(playerNumber).setShippingShares(b);
					int newBalance = playerNames.get(playerNumber).getPlayerBalance() - (board.getShipping() * b);
					playerNames.get(playerNumber).setBalance(newBalance);
					board.setShippingShares(board.getShippingShares() - b);
					System.out.println("You bought " + b + " Shipping Stocks" + "\n" + "Your new balance is: " + 
							playerNames.get(playerNumber).getPlayerBalance());
				}
				else {
					System.out.println("Value has to be between 1 and 5");
					buyShares();
				}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				buyShares();
			}
			break;
			case 3:     try{System.out.println("how many store shares would you like to buy?");
			int c  = input.nextInt();
			if (c > 0 && c < 6 || c % 5 == 0)
				if (board.getStore() != 0 && board.getStoreShares() != 0 && playerNames.get(playerNumber).getPlayerBalance() > 
			board.getStore() * c){
				playerNames.get(playerNumber).setStoreShares(c);
				int newBalance = playerNames.get(playerNumber).getPlayerBalance() - (board.getStore() * c);
				playerNames.get(playerNumber).setBalance(newBalance);
				board.setStoreShares(board.getStoreShares() - c);
				System.out.println("You bought " + c + " Store Stocks" + "\n" + "Your new balance is: " + 
						playerNames.get(playerNumber).getPlayerBalance());
			}
			else {
				System.out.println("Value has to be between 1 and 5");
				buyShares();
			}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				buyShares();
			}
			break;
			case 4:       System.out.println("how many steel shares would you like to buy?");
			try{
				int d  = input.nextInt();
				if (d > 0 && d < 6 || d % 5 == 0)
						if (board.getSteel() !=0 && board.getSteelShares() != 0 && playerNames.get(playerNumber).getPlayerBalance() > 
				board.getSteel() * d){
					playerNames.get(playerNumber).setSteelShares(d);
					int newBalance = playerNames.get(playerNumber).getPlayerBalance() - (board.getSteel() * d);
					playerNames.get(playerNumber).setBalance(newBalance);
					board.setSteelShares(board.getSteelShares() - d);
					System.out.println("You bought " + d + " Steel Stocks" + "\n" + "Your new balance is: " + 
							playerNames.get(playerNumber).getPlayerBalance());
				}
				else {
					System.out.println("Value has to be between 1 and 5");
					buyShares();
				}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				buyShares();
			}
			break;
			case 0:    mainMenuThree();
			break;

			}
		}
		catch (Exception e){
			String throwOut = input.nextLine();  //swallows
			System.out.println("Error Invalid Data");
			buyShares();
		}
	}

	/**
	 * Menu for selling shares along with the corresponding options that allow users to sell shares
	 */
	public void sellShares(){
		int index =0;
		try{
			System.out.println("Which type of share would you like to sell?:  ");	
			System.out.println("   1)  Motor");
			System.out.println("   2)  Shipping");
			System.out.println("   3)  Store");
			System.out.println("   4)  Steel");
			System.out.println("   0)  Exit");
			int i = input.nextInt();
			switch (i){
			case 1:      System.out.println("how many motor shares would you like to sell?");
			try {
				int a  = input.nextInt();
					if(board.getMotor() != 0 && playerNames.get(playerNumber).getMotorShares() >= a){
						playerNames.get(playerNumber).setMotorShares(playerNames.get(playerNumber).getMotorShares()-a);
						int newBalance = playerNames.get(playerNumber).getPlayerBalance() + (board.getMotor() * a);
						playerNames.get(playerNumber).setBalance(newBalance);
						board.setMotorShares(board.getMotorShares() + a);
						System.out.println("You sold " + a + " Motor Stocks" + "\n" + "Your new balance is: " + 
								playerNames.get(playerNumber).getPlayerBalance());
					}
					else {
						System.out.println("Value has to be between 1 and 5 or a multiple of 5" + "\n" + "Or you may not have enough stocks to sell"
								+ " you currently have" + playerNames.get(playerNumber).getMotorShares() + " Motor stocks");

						sellShares();
					}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				buyShares();

			}
			break;
			case 2:      System.out.println("how many shipping shares would you like to sell?");
			try {
				int b  = input.nextInt();
					if (board.getShipping() != 0 && playerNames.get(playerNumber).getShippingShares() >= b){
						playerNames.get(playerNumber).setMotorShares(playerNames.get(playerNumber).getShippingShares()-b);
						int newBalance = playerNames.get(playerNumber).getPlayerBalance() + (board.getShipping() * b);
						playerNames.get(playerNumber).setBalance(newBalance);
						board.setShippingShares(board.getShippingShares() + b);
						System.out.println("You sold " + b + " Shipping Stocks" + "\n" + "Your new balance is: " + 
								playerNames.get(playerNumber).getPlayerBalance());
					}
					else{
						System.out.println("Value has to be between 1 and 5 or a multiple of 5" + "\n" + "Or you may not have enough stocks to sell"
								+ " you currently have" + playerNames.get(playerNumber).getShippingShares() + " Shipping stocks");
						sellShares();
					}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				buyShares();
			}
			break;
			case 3:     System.out.println("how many store shares would you like to sell?");
			try {
				int c  = input.nextInt();
					if (board.getStore() != 0 && playerNames.get(playerNumber).getStoreShares() >= c){
						playerNames.get(playerNumber).setMotorShares(playerNames.get(playerNumber).getStoreShares()-c);
						int newBalance = playerNames.get(playerNumber).getPlayerBalance() + (board.getStore() * c);
						playerNames.get(playerNumber).setBalance(newBalance);
						board.setStoreShares(board.getStoreShares() + c);
						System.out.println("You sold " + c + " Store Stocks" + "\n" + "Your new balance is: " + 
								playerNames.get(playerNumber).getPlayerBalance());
					}
					else{
						System.out.println("Value has to be between 1 and 5 or a multiple of 5" + "\n" + "Or you may not have enough stocks to sell"
								+ " you currently have" + playerNames.get(playerNumber).getStoreShares() + " Store stocks");
						sellShares();
					}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				sellShares();
			}
			break;
			case 4:       System.out.println("how many steel shares would you like to sell?");
			try {
				int d  = input.nextInt();
					if(board.getSteel() != 0 && playerNames.get(playerNumber).getSteelShares() >= d){
						playerNames.get(playerNumber).setMotorShares(playerNames.get(playerNumber).getSteelShares()-d);
						int newBalance = playerNames.get(playerNumber).getPlayerBalance() + (board.getSteel() * d);
						playerNames.get(playerNumber).setBalance(newBalance);
						board.setSteelShares(board.getSteelShares() + d);
						System.out.println("You sold " + d + " Steel Stocks" + "\n" + "Your new balance is: " + 
								playerNames.get(playerNumber).getPlayerBalance());
					}
					else{
						System.out.println("Value has to be between 1 and 5 or a multiple of 5" + "\n" + "Or you may not have enough stocks to sell"
								+ " you currently have" + playerNames.get(playerNumber).getSteelShares() + " Steel stocks");
						sellShares();
					}
			}
			catch (Exception e){
				String throwOut = input.nextLine();  //swallows
				System.out.println("Error Invalid Data");
				sellShares();
			}
			break;

			}
		}
		catch (Exception e){
			String throwOut = input.nextLine();  //swallows
			System.out.println("Error Invalid Data");
			sellShares();
		}


	}

	/**
	 * 
	 * @throws IOException
	 * @throws ClassNotFoundException
	 * method allows the game to be saved.
	 * Reference: http://docs.oracle.com/javase/7/docs/api/java/io/FileOutputStream.html
	 * Reference: http://docs.oracle.com/javase/7/docs/api/java/io/ObjectOutputStream.html
	 */
	public void saveLoad() throws IOException, ClassNotFoundException
	{
		//Create new board for testing
		System.out.println("Creating board:");
		board = new Board(board.getMotor(), board.getStore(), board.getShipping(), board.getSteel(), board.getRound());

		System.out.println("Saving board and players");
		//FileOutputStream will save to board.dat
		FileOutputStream fos = new FileOutputStream("board.dat");
		ObjectOutputStream oos = new ObjectOutputStream(fos);

		//Serialize the object and write to file.
		oos.writeObject(board);
		oos.writeObject(playerNames);
		System.out.println("Saved");

		//Don't forget to close the streams (Avoids memory leaks)
		oos.close();
		fos.close();
	}

	/**
	 * 
	 * @throws IOException
	 * @throws ClassNotFoundException
	 * method allows the game to be loaded.
	 * Reference: http://docs.oracle.com/javase/7/docs/api/java/io/FileOutputStream.html
	 * Reference: http://docs.oracle.com/javase/7/docs/api/java/io/ObjectOutputStream.html
	 */
	public void load() throws IOException, ClassNotFoundException{
		//Load saved board.
		System.out.println("Create new board from saved board:");
		FileInputStream fis = new FileInputStream("board.dat");
		ObjectInputStream ois = new ObjectInputStream(fis);

		//Load the old board state into the newly created Board object
		board = (Board) ois.readObject();
		playerNames = (ArrayList<Player>) ois.readObject();

		//Again, don't forget to close the streams
		fis.close();
		ois.close();
	}
}
