import java.util.Scanner;
import java.util.ArrayList;

public class Driver {

	private Scanner input;
	private Board board;
	private Cards cards;
	private CardSetup cardSetup;
	int i;
	private int index;
	private String str="";
	private int playerNumber;
	ArrayList<Player> playerNames = new ArrayList<Player>();
	private int endingRound = 0;
	private Player player;

	public Driver()
	{
		input = new Scanner(System.in);
		board = new Board();
		cards = new Cards();
		player = new Player();
		cardSetup = new CardSetup(null, null, 0);
		i=0;
		playerNumber = 0;
		numberOfPlayers();
	}

	public static void main(String[] argvs){
		Driver driver = new Driver();
	}




	private void numberOfPlayers()
	{
		System.out.println("Enter the number of players: ");
		int i = input.nextInt();
		if (i>=3 && i < 7)
		{
			this.i=i;
			run();
		}
		else
		{
			System.out.println("Invalid Number of Players, has to be between 3 and 6");
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine(); 
			//clear the terminal window and display the main menu again
			System.out.println("\f");
			numberOfPlayers();
		}


	}

	private void run()
	{

		if (board.getRound() < 12){
		int option = mainMenu();
		while (option != 0)
		{

			switch (option)
			{
			case 1:    addPlayer();
			break; 
			// case 2 is load game feature, add later?
			case 3:    System.out.println(board.toString());
			break;
			case 4:    
				if (playerNames.size() > 0){
					firstMenu();
				}
				else System.out.println("Add players first");
			break;
			case 5: 	System.out.println("Rules of Stocks and Shares" + "\n" +"\n"
					+ "Four Types of Stock Commodity."+ "\n" + "There are 28 shares for each Commodity." + "\n" + "Each commodity can go up and down on the stock market." + "\n" 
					+  "\n" +"26 Cards" + "\n" + "1 Bear Card (all four commodities down £4)" + "\n" + "1 Bull Card (all four commodities up £4)" + "\n" + "Each commodity has six cards." + "\n" + "Down £4, Down £3, Down £2, Up £2, Up £3 and Up £4." +"\n" + "The “Share Price Indicator” on Board (max price is £20 and min price is £0)" +"\n" +"\n" 
					+ "How to play" +"\n" +"\n" + "There must be at least 3 players and no more than 6" + "\n" + "The object is, by buying or selling shares, to be the player with the most money at the end of the game" + "\n" 
					+ "There are four kinds of shares.  During the game the values of the shares rise and fall according to the cards which affect them." + "\n"
					+ "One card is dealt randomly to each player.  Players in turn decide whether to buy or sell shares by looking at their card and by drawing deductions from what other players’ have done." + "\n" + "\n"
                    + "After the buying and selling is finished, the players expose their cards" +"\n" + "and the value of the shares are moved up or down on the “Share Price Indicator” board in accordance with the instructions on the exposed cards." +"\n"
					+ "A single card each is again dealt and buying and selling of shares is done at the new values on the board.  There are 12 rounds of buying and selling in the game." + "\n"
					+ "Players consequently make profits and losses throughout the game, depending on their skill in selling shares at a higher price than they paid for them." + "\n"
					+ "The winner is the player who ends the game with the most money." +"\n" +"\n"
					+ "At the start of the game" +"\n"
					+ "Each player gets £80 of currency" +"\n"
					+ "The share price for each commodity is set to £10 on the “Share Price Indicator” board." +"\n" +"\n" 
					+ "Round 1" +"\n"
					+ "Each player is dealt a card randomly (in each round only one card can appear once). This card is kept secret from other players." + "\n"
					+ "Each player takes their turn deciding whether to buy shares or pass." +"\n" + "A player can buy up to or including 5 of any kind of commodity.  If they want more than 5, of a kind, s/he must by multiples of 5 e.g. 10, 15, 20, etc.  The player must have enough money to buy the shares and there must be enough shares left to buy." +"\n" 	
					+ "If a player decides to buy shares, they are £10 each in the first round.  The number of shares for each commodity they buy are deducted from the total of available shares for that commodity." + "\n" + "\n"
					+ "Scoring at the end of Round 1" +"\n"
					+ "When each player has taken their turn, each player’s card is displayed and the values of the shares increase or decrease based on the values of the cards. Note: A bear card, all down £4.  A bull card, all up £4." + "\n" + "\n" 
					+ "Subsequent Rounds" +"\n" 
					+ "The play and scoring for all subsequent rounds are exactly the same as for the first round, except that, in addition to buying, a player who holds shares can sell them as the price shown on the “Share Price Indicator” board." + "\n" 
					+ "Shares cannot go higher than £20 or drop below £0.  Shares cannot be bought or sold at £0." +"\n" +"\n" 
					+ "End of Game" +"\n"
					+ "The game ends when 12 rounds have been played." +"\n" 
					+ "All players now sell their shares according to the values on the “Share Price Indicator” board.  This amount is added to their existing cash."  +"\n"
					+ "The winner is determined as the player with the most money!");

			}
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

			//clear the terminal window and display the main menu again
			System.out.println("\f");
			option = mainMenu();
		}   
		System.out.println("Exiting... bye");
		System.exit(0);
	}
		else{
			int i =0;
			for (Player player: playerNames){
				playerNames.get(i).sellShareMotor(player.getMotorShares());
				playerNames.get(i).sellShareSteel(player.getSteelShares());
				playerNames.get(i).sellShareStore(player.getStoreShares());
				playerNames.get(i).sellShareShipping(player.getShippingShares());
				i++;
			}
			if (playerNames.size() > 0)
		      {
				int a=0;
		         Player richest = playerNames.get(0);
		         for (Player player : playerNames)
		         { 
		            if (playerNames.get(a).getPlayerBalance() > richest.getPlayerBalance() )  
		                richest = playerNames.get(a);
		                a++;
		         }
		         System.out.println("The winner is Player" + richest);
		      }
		}
	}
	

	private void firstMenu()
	{
		int option = mainMenuTwo();
		while (option != 0)
		{

			switch (option)
			{
			case 1:    if (endingRound == 0){
				           drawingCards(); 
			              }
					  else {
						  System.out.println("Cards have already been drawn!");
					  }
			break;
		//	case 2:    load
			case 3:    System.out.println(board.toString());
			break;
			case 4:    if (endingRound == 1)
				       { secondMenu();
				       }
			      else {
				       System.out.println("Must draw cards first!");
				       }
			break;
			}
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

			//clear the terminal window and display the main menu again
			System.out.println("\f");
			option = mainMenuTwo();
		}   
		System.out.println("Exiting... bye");
		System.exit(0);
	}
	
	private void secondMenu()
	{
		int option = mainMenuThree();
		while (option != 0)
		{

			switch (option)
			{
			case 1:    buyShares();
			break;
			case 2:    sellShares();
			break;
			case 3:    System.out.println(playerNames.get(index).getAllShares());
			break;
			case 4:    //Save Game
			break;
			case 5:   System.out.println(playerNames.get(playerNumber).getPlayerBalance());
			break;
			case 6:    mainMenu();
			           playerNumber++;
			           playerNames.get(index).setIndex();
			           System.out.println("Player" + playerNumber + " are you ready to end the round?");
			           String apple = input.nextLine();
			   	       if (apple.toLowerCase().equals("y"))
			   	    		   {
			           board.setRound();
			   	       }
			   	       else{
			   	    	   mainMenuThree();
			   	       }
			
			break;
			
			}
			System.out.println("\nPress any key to continue...");
			input.nextLine();
			input.nextLine();  //this second read is required - bug in Scanner class; a String read is ignored straight after reading an int.

			//clear the terminal window and display the main menu again
			System.out.println("\f");
			option = mainMenuThree();
		}   
		System.out.println("Exiting... bye");
		System.exit(0);
	}
	private int mainMenu()     
	{ 
		System.out.println("Welcome to Stocks and Shares");
		System.out.println("---------");     
		System.out.println("  1) Add Player Names");    
		System.out.println("  2) Load Game");
		System.out.println("  3)  Get Current Stock Prices");
		System.out.println("  4) Start Game");
		System.out.println("  5) Rules");
		System.out.println("  0) Quit Game");
		int option = input.nextInt();
		return option;	
	}
	
	private int mainMenuTwo()
	{
		System.out.println("Stocks and Shares");
		System.out.println("---------");     
		System.out.println("  1) Draw Cards");
		System.out.println("   3)  Save Game");
		System.out.println("   4)  Start Buying/Selling Phase");
		
		
		int option = input.nextInt();
		return option;	
	}
	
	private int mainMenuThree()
	{
		System.out.println("Player" + playerNumber + "It's your Go");
		System.out.println("---------");
		System.out.println("  1) Buy Stocks");
		System.out.println("  2) Sell Stocks");
		System.out.println("  3) Check Current Stocks");
		System.out.println("  4) Save Game");
		System.out.println("  5) Check Current Balance");
		System.out.println("  6) End Turn");
		
		int option = input.nextInt();
		return option;
	}


	private void addPlayer()  
	{
		for(int b=0; b<i; b++)
		{
			System.out.println("Player Number " + (b+1) + " enter your name: ");
			String c = input.nextLine();
			c = input.nextLine();
			Player player = new Player(c);
			playerNames.add(player);

		}
	}


	
	public String drawingCards(){
		int i=1;
		if (playerNames.size() > 0)
		{
			for (Player player: playerNames){
				{
				System.out.println("Player" + i + " are you ready to draw your card? press Y when ready");
				String newStatus = input.nextLine();
				newStatus=input.nextLine(); // bug?
				if (newStatus.toLowerCase().equals("y"))
				{
					System.out.println(cards.drawCard());
					int index = cards.getIndex();
					if (cards.currentCardType(index).equals("Store")){
						if (cards.currentUpOrDown(index).equals("Up: £")){
							board.setStoreUp(cards.currentCardValue(index));
						}
					
					    else {
							board.setStoreDown(cards.currentCardValue(index));
						}
					}

						if (cards.currentCardType(index).equals("Steel")){
							if (cards.currentUpOrDown(index).equals("Up: £")){
								board.setSteelUp(cards.currentCardValue(index));
							}
							else {
								board.setSteelDown(cards.currentCardValue(index));
							}
						}

							if (cards.currentCardType(index).equals("Shipping")){
								if (cards.currentUpOrDown(index).equals("Up: £")){
									board.setShippingUp(cards.currentCardValue(index));
								}
								else {
									board.setShippingDown(cards.currentCardValue(index));
								}
							}
							
								if (cards.currentCardType(index).equals("Motor")){
									if (cards.currentUpOrDown(index).equals("Up: £")){
										board.setMotorUp(cards.currentCardValue(index));
									}
									else {
										board.setMotorDown(cards.currentCardValue(index));
									}	
									
								}
								if (cards.currentCardType(index).equals("Bear")){
									board.setMotorDown(cards.currentCardValue(index));
									board.setShippingDown(cards.currentCardValue(index));
									board.setStoreDown(cards.currentCardValue(index));
									board.setSteelDown(cards.currentCardValue(index));
								}
								
								if (cards.currentCardType(index).equals("Bull")){
									board.setMotorUp(cards.currentCardValue(index));
									board.setShippingUp(cards.currentCardValue(index));
									board.setStoreUp(cards.currentCardValue(index));
									board.setSteelUp(cards.currentCardValue(index));
								}
								   cards.removeArray(cards.getIndex());
									i++;	
							
				}
				}
				cards.makeCards();
				endingRound = 1;
			}
		}

		return "Need more players";
	}
	
	public void buyShares(){
		index=0;
		System.out.println("Which type of share would you like to buy?:  ");
		System.out.println("   1)  Motor");
		System.out.println("   2)  Shipping");
		System.out.println("   3)  Store");
		System.out.println("   4)  Steel");
		int i = input.nextInt();
		switch (i){
		case 1:      System.out.println("how many motor shares would you like to buy?");
					 int a  = input.nextInt();
					 playerNames.get(index).buyShareMotor(a);
		break;
		case 2:      System.out.println("how many shipping shares would you like to buy?");
					 int b  = input.nextInt();
					 playerNames.get(index).buyShareShipping(b);
		break;
		case 3:	    System.out.println("how many store shares would you like to buy?");
					int c  = input.nextInt();
					playerNames.get(index).buyShareStore(c);
		break;
		case 4:       System.out.println("how many steel shares would you like to buy?");
					  int d  = input.nextInt();
					  playerNames.get(index).buySteelShares(d);
		break;

		}
	}
	
	public void sellShares(){
		int index =0;
		System.out.println("Which type of share would you like to sell?:  ");
		int i = input.nextInt();
		System.out.println("   1)  Motor");
		System.out.println("   2)  Shipping");
		System.out.println("   3)  Store");
		System.out.println("   4)  Steel");
		switch (i){
		case 1:      System.out.println("how many motor shares would you like to sell?");
					 int a  = input.nextInt();
					 playerNames.get(index).sellShareMotor(a);
		break;
		case 2:      System.out.println("how many shipping shares would you like to sell?");
					 int b  = input.nextInt();
					 playerNames.get(index).sellShareMotor(b);
		break;
		case 3:	    System.out.println("how many store shares would you like to sell?");
					int c  = input.nextInt();
					playerNames.get(index).sellShareStore(c);
		break;
		case 4:       System.out.println("how many steel shares would you like to sell?");
					  int d  = input.nextInt();
					  playerNames.get(index).sellShareSteel(d);
		break;

		}

	}
}
